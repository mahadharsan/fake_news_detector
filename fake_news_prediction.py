# -*- coding: utf-8 -*-
"""Fake news prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BY_yaD6QmFlbglrZ6nSjkUVOP4jNkCkq

Till now I have used only numeric data so this is an important project that use text data.

News data --> data preprocessing --> Train split Train -->Logistic regression model (since binary classification problem)--> trained model, find accuracy --> feed new data and predict real/fake

Importing the dependencies
"""

import pandas as pd  #for dataframe
import numpy as np   #array
import re #for searching text
from nltk.corpus import stopwords #naturallanguagetoolkit corpus- body
from nltk.stem.porter import PorterStemmer #take a word removes prefix and suffix
from sklearn.feature_extraction.text import TfidfVectorizer #text to numbers
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

news = pd.read_csv("train.csv")
#news =pd.read_csv("train.csv",engine='python', error_bad_lines=False)
news.head()

import nltk
nltk.download('stopwords')

print(stopwords.words('english'))

"""Data Pre processing"""

#loading the dataset to a pandas df
#news = pd.read_csv("train.csv")
news.shape

#count number of missing values
news.isnull().sum()

#replacing null values with empty string
news = news.fillna("")

#merging author name and title
news['content'] = news['author']+' '+news['title']

news['content']

#seperating the data and labels
X = news.drop('label',axis=1)
Y = news['label']

print(X)
print(Y)

"""Steming
Process of reducing a word to its root word
"""

port_stem = PorterStemmer()

def stemming(content):
  stemmed_content = re.sub('[^a-zA-Z]',' ',content)
  stemmed_content = stemmed_content.lower()
  stemmed_content = stemmed_content.split()
  stemmed_content = [port_stem.stem(word) for word in stemmed_content if not word in stopwords.words('english')]
  stemmed_content = ' '.join(stemmed_content)
  return stemmed_content

news['content'] = news['content'].apply(stemming)

print(news['content'])

#seperating the data and label
X = news['content'].values
Y = news['label'].values

print(X)
print(Y)

#Convert text to computer understandable numerical data
vectorizer = TfidfVectorizer()
vectorizer.fit(X)

X = vectorizer.transform(X)

print(X)

"""Splitting the dataset to training and test data"""

X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size=0.2, stratify = Y, random_state =2)

"""Training the model : Logistics Regression"""

model = LogisticRegression()

model.fit(X_train, Y_train)

"""Evaluation"""

#Accuracy score on the training data
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print(training_data_accuracy)

X_test_prediction = model.predict(X_test)
testing_accuracy = accuracy_score(X_test_prediction, Y_test)

print(testing_accuracy)

"""Making a predictive system

"""

X_new = X_test[0]

prediction= model.predict(X_new)
print(prediction)

print(Y_test[0])

